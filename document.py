from xml.etree import ElementTree
import os

class Document:
    def __init__(self, path: str):
        """
        :param path: path to the .xml generated by grobid
        """
        self.path = path
        if not os.path.exists(path):
            raise ValueError(f"File {path} does not exist")
        self.name = os.path.basename(path).removesuffix('.xml')
    
    def paragraph(self, min_length: int = 1000):
        """
        :param min_length: minimum length of the paragraph
        :return: generator of paragraphs text in the document
        """
        with open(self.path, "r", encoding='utf-8') as f:
            element = ElementTree.fromstring(f.read())
        paragraph = ""
        prefix = "{http://www.tei-c.org/ns/1.0}"
        # load title paragraph
        title = element.find(prefix + 'teiHeader').find(prefix + 'fileDesc').find(prefix + 'sourceDesc').find(prefix + 'biblStruct').find(prefix + 'analytic').find(prefix + 'title')
        if title is not None:
            paragraph += self._remove_special_char(title.text) + '\n'
        # load abstract paragraph
        abstract = element.find(prefix + 'teiHeader').find(prefix + 'profileDesc').find(prefix + 'abstract')
        if abstract is not None:
            for sentence in abstract.itertext():
                paragraph += self._remove_special_char(sentence)
        # load body paragraph
        for section in element.find(prefix + 'text').find(prefix + 'body').findall(prefix + 'div'):
            for sentence in section.itertext():
                if len(paragraph) >= min_length:
                    yield paragraph
                    paragraph = ""
                if not sentence.strip():
                    continue
                paragraph += self._remove_special_char(sentence)
                
    
    @staticmethod
    def _remove_special_char(string: str) -> str:
        return string.replace('â– ', '').replace('\t', ' ').strip()
    

if __name__ == '__main__':
    doc = Document("Test/grobid-output/10.1099_00207713-22-2-81.xml")
    paragraphs = doc.paragraph(min_length=1000)
    print(doc.name)